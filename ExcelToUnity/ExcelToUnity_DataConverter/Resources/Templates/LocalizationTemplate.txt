/**
 * Author RadBear - nbhung71711@gmail.com - 2017-2021
 **/

using System.Collections.Generic;
using UnityEngine;

public class LOCALIZATION_CLASS_NAME
{
//LOCALIZED_DICTIONARY_KEY_ENUM
//LOCALIZED_DICTIONARY_KEY_CONST
//LOCALIZED_DICTIONARY_KEY_STRING
//LOCALIZED_LIST
//LOCALIZED_DICTIONARY

    public static string currentLanguage
    {
        get { return PlayerPrefs.GetString("currentLanguage", defaultLanguage); }
        set { PlayerPrefs.SetString("currentLanguage", value); }
    }

    public static string Get(int pId, string pLang)
    {
        if (language.ContainsKey(pLang))
        {
            if (pId >= 0 && pId < language[pLang].Length)
                return language[pLang][pId];
        }
        Debug.LogError("Not found id " + pId);
        return "";
    }

    public static string Get(ID pId)
    {
        if (language.ContainsKey(currentLanguage))
        {
            return language[currentLanguage][(int)pId];
        }
        Debug.LogError("Not found id " + pId);
        return "";
    }

    public static string Get(int pId)
    {
        if (language.ContainsKey(currentLanguage))
        {
            if (pId >= 0 && pId < language[currentLanguage].Length)
                return language[currentLanguage][pId];
        }
        Debug.LogError("Not found id " + pId);
        return "";
    }

    public static string Get(ID pId, string pLang)
    {
        if (language.ContainsKey(pLang))
        {
            return language[pLang][(int)pId];
        }
        Debug.LogError("Not found id " + pId);
        return "";
    }

    public static string GetDefault(ID pId)
    {
        try
        {
            return language[defaultLanguage][(int)pId];
        }
        catch
        {
            return "";
        }
    }

    public static string GetDefault(int pId)
    {
        try
        {
            return language[defaultLanguage][pId];
        }
        catch
        {
            return "";
        }
    }

    public static string Get(string pIdString, string pLang)
    {
        int index = 0;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                index = i;
                return Get(index, pLang);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }
	
    public static string Get(string pIdString)
    {
        int index = 0;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                index = i;
                return Get(index, defaultLanguage);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }
	
    public static string Get(string pIdString, ref int pIndex)
    {
        pIndex = -1;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                pIndex = i;
                return Get(pIndex, defaultLanguage);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }
	
    public static string Get(string pIdString, ref ID pId)
    {
        int index = -1;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                index = i;
                pId = (ID)index;
                return Get(pId, defaultLanguage);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }
}

public class LOCALIZATION_CLASS_NAMEGetter
{
    private static Dictionary<string, int> cachedTexts = new Dictionary<string, int>();

    public string key;
    public string defaultStr;

    private int mIndex = -1;
    private bool mCheckKey;

    public LOCALIZATION_CLASS_NAMEGetter(string pKey, string pDefault)
    {
        key = pKey;
        defaultStr = pDefault;

#if UNITY_EDITOR
        //In Editor we check it soon to find missing localization
        LOCALIZATION_CLASS_NAME.Get(key, ref mIndex);
        mCheckKey = true;
#endif
    }

    public string Get()
    {
        if (!mCheckKey)
        {
            LOCALIZATION_CLASS_NAME.Get(key, ref mIndex);
            mCheckKey = true;
        }

        if (mIndex == -1)
            return defaultStr;
        var text = LOCALIZATION_CLASS_NAME.Get(mIndex);
        if (string.IsNullOrEmpty(text))
            return defaultStr;
        else
            return LOCALIZATION_CLASS_NAME.Get(mIndex).Replace("\\n", "\u000a");
    }

    public static string GetCached(string pKey)
    {
        if (cachedTexts.ContainsKey(pKey))
        {
            int id = cachedTexts[pKey];
            if (id != -1)
            {
                string text = LOCALIZATION_CLASS_NAME.Get(cachedTexts[pKey]);
                return !string.IsNullOrEmpty(text) ? text : pKey;
            }
            return pKey;
        }
        else
        {
            int id = -1;
            string text = LOCALIZATION_CLASS_NAME.Get(pKey, ref id);
            cachedTexts.Add(pKey, id);
            return !string.IsNullOrEmpty(text) ? text : pKey;
        }
    }
}